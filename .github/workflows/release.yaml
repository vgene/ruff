name: "[ruff] Release"

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "The version to tag, without the leading 'v'. If omitted, will initiate a dry run (no uploads)."
        type: string
      sha:
        description: "Optionally, the full sha of the commit to be released"
        type: string
  push:
    paths:
      # When we change pyproject.toml, we want to ensure that the maturin builds still work
      - pyproject.toml

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: ruff
  PYTHON_VERSION: "3.7" # to build abi3 wheels
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUSTUP_MAX_RETRIES: 10

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64
      - name: "Prep README.md"
        run: python scripts/transform_readme.py --target pypi
      - name: "Build wheels"
        run: |
          /usr/bin/docker pull quay.io/pypa/manylinux2014_x86_64:latest
          MY_CMD=$(cat << EOF
          #!/bin/bash
          set -e
          echo "::group::Install Rust"
          which rustup > /dev/null || curl --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain 1.70
          export PATH="$HOME/.cargo/bin:$PATH"
          rustup override set 1.70
          rustup component add llvm-tools-preview || true
          echo "::endgroup::"
          export PATH="$PATH:/opt/python/cp37-cp37m/bin:/opt/python/cp38-cp38/bin:/opt/python/cp39-cp39/bin:/opt/python/cp310-cp310/bin:/opt/python/cp311-cp311/bin"
          echo "::group::Install maturin"
          curl -L https://github.com/PyO3/maturin/releases/download/v1.1.0/maturin-x86_64-unknown-linux-musl.tar.gz | tar -xz -C /usr/local/bin
          maturin --version || true
          which patchelf > /dev/null || python3 -m pip install patchelf
          python3 -m pip install cffi || true
          echo "::endgroup::"
          echo "::group::Install Rust target"
          if [[ ! -d $(rustc --print target-libdir --target x86_64-unknown-linux-gnu) ]]; then rustup target add x86_64-unknown-linux-gnu; fi
          echo "::endgroup::"
          maturin build --target x86_64-unknown-linux-gnu --release --out dist -vv
          EOF
          )
          echo $MY_CMD > /home/runner/work/ruff/ruff/run-maturin-action.sh
          chmod +x /home/runner/work/ruff/ruff/run-maturin-action.sh
          /usr/bin/docker run --rm --workdir /home/runner/work/ruff/ruff -e CARGO_INCREMENTAL=0 -v /home/runner/work/ruff/ruff:/home/runner/work/ruff/ruff quay.io/pypa/manylinux2014_x86_64:latest /home/runner/work/ruff/ruff/run-maturin-action.sh
      - name: "Dump run-maturin-action.sh"
        run: |
          cat /home/runner/work/ruff/ruff/run-maturin-action.sh
      - name: "Test wheel"
        if: ${{ startsWith(matrix.target, 'x86_64') }}
        run: |
          pip install dist/${{ env.PACKAGE_NAME }}-*.whl --force-reinstall
          ruff --help
          python -m ruff --help
      - name: "Upload wheels"
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
      - name: "Archive binary"
        run: |
          ARCHIVE_FILE=ruff-${{ matrix.target }}.tar.gz
          tar czvf $ARCHIVE_FILE -C target/${{ matrix.target }}/release ruff
          shasum -a 256 $ARCHIVE_FILE > $ARCHIVE_FILE.sha256
      - name: "Upload binary"
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: |
            *.tar.gz
            *.sha256
